import { Message } from '../types';

// Function to completely strip all markdown formatting
export function cleanMarkdown(text: string): string {
  return text
    // Remove headers (### ## #)
    .replace(/^#{1,6}\s+/gm, '')
    // Remove bold (**text** or __text__)
    .replace(/\*\*(.*?)\*\*/g, '$1')
    .replace(/__(.*?)__/g, '$1')
    // Remove italic (*text* or _text_)
    .replace(/\*(.*?)\*/g, '$1')
    .replace(/_(.*?)_/g, '$1')
    // Remove strikethrough (~~text~~)
    .replace(/~~(.*?)~~/g, '$1')
    // Remove inline code (`code`)
    .replace(/`([^`]+)`/g, '$1')
    // Remove code blocks (```code```)
    .replace(/```[\s\S]*?```/g, (match) => {
      return match.replace(/```\w*\n?/g, '').replace(/```/g, '');
    })
    // Remove blockquotes (> text)
    .replace(/^>\s+/gm, '')
    // Remove horizontal rules (--- or ***)
    .replace(/^[-*]{3,}$/gm, '')
    // Remove links [text](url)
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
    // Remove reference links [text][ref]
    .replace(/\[([^\]]+)\]\[[^\]]*\]/g, '$1')
    // Remove images ![alt](url)
    .replace(/!\[([^\]]*)\]\([^)]+\)/g, '$1')
    // Remove list markers (- * +)
    .replace(/^[\s]*[-*+]\s+/gm, '• ')
    // Remove numbered list markers (1. 2. etc)
    .replace(/^[\s]*\d+\.\s+/gm, '• ')
    // Remove HTML tags
    .replace(/<[^>]*>/g, '')
    // Clean up multiple spaces
    .replace(/\s{2,}/g, ' ')
    // Clean up multiple newlines
    .replace(/\n{3,}/g, '\n\n')
    // Trim whitespace
    .trim();
}

export function formatTimestamp(date: Date): string {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
  }).format(date);
}

export function formatMessages(messages: Message[]): string {
  const lines: string[] = [];
  
  messages.forEach((msg, index) => {
    if (msg.role === 'system') return;
    
    const timestamp = formatTimestamp(msg.timestamp);
    const role = msg.role === 'user' ? 'User' : 'ForwardOps AI';
    const content = cleanMarkdown(msg.content);
    
    // Add separator between messages (except for the first one)
    if (index > 0 && lines.length > 0) {
      lines.push('---');
    }
    
    lines.push(`${role} (${timestamp}):`);
    lines.push(content);
    lines.push(''); // Empty line after each message
  });
  
  return lines.join('\n');
}

export function generateTranscriptTitle(): string {
  const date = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
  return `Forward Assist HQ - Chat Transcript\nGenerated on ${date}`;
}

export function generateFooter(): string {
  return `This transcript was generated by Forward Assist HQ on ${new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
  })}.\n\nFor more information, visit Forward Assist HQ.`;
}

// Enhanced PDF formatting with proper spacing
export function formatForPDF(messages: Message[]): {
  title: string;
  content: string;
  footer: string;
} {
  const title = generateTranscriptTitle();
  const footer = generateFooter();
  
  const formattedMessages: string[] = [];
  
  messages.forEach((msg, index) => {
    if (msg.role === 'system') return;
    
    const timestamp = formatTimestamp(msg.timestamp);
    const role = msg.role === 'user' ? 'User' : 'ForwardOps AI';
    const content = cleanMarkdown(msg.content);
    
    // Message header with role and timestamp
    formattedMessages.push(`${role} - ${timestamp}`);
    formattedMessages.push(''); // Space after header
    
    // Split content into paragraphs and add proper spacing
    const paragraphs = content.split('\n\n').filter(p => p.trim());
    paragraphs.forEach((paragraph, pIndex) => {
      const lines = paragraph.split('\n').filter(line => line.trim());
      lines.forEach(line => {
        formattedMessages.push(line.trim());
      });
      
      // Add space between paragraphs (except last one)
      if (pIndex < paragraphs.length - 1) {
        formattedMessages.push('');
      }
    });
    
    // Add extra space between messages
    formattedMessages.push('');
    formattedMessages.push('');
  });
  
  return {
    title,
    content: formattedMessages.join('\n'),
    footer
  };
}